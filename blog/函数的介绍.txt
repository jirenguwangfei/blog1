一.函数的五种声明方式
1.具名函数
    function x (输入1，输入2) {
        return undefined
    }

2.匿名函数
    var a = xxx
    a = function (input1, input2){ return }

3.把有名字的函数给个变量
    var x = function y (input1, input2)
    (左边是个变量，右边是个具名函数 )
    console.log(y)
 <- undefined

4.window.Function
   var f = new Function('x','y','return x+y')
   f.name // "anonymous"

5.箭头函数 （x, y）=> {return x + y}
    例如：sum = (x, y) => {return x + y}
          (sum = (x, y) => x +y 单句可以省略return和花括号)
          参数只有一个时，可以省略左边的括号

二.函数的本质
1.函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。
    例如：
    function 求三角形面积 (width, height) {
        var n = width * height
        var m = n / 2
        return m
    }

2.如何调用函数
  f.call(asThis, input1,input2)
  其中 asThis 会被当做 this，[input1,input2] 会被当做 arguments
  禁止使用 f(input1, input2)，因为学会 .call 才能理解 this


三.this 与arguments
1.  f.call(undefined, 1, 2)  //3
    this ->  'undefined'  arguments -> '[1,2]'
   *call的第一个参数可以用this得到
    call的后面的参数可以用arguments得到

    function f(){
        'use strict'
        console.log(this)
        console.log(arguments)
        return undefined
    }
    f.call(1,2,3) // this 为 1，arguments 为 [2,3]

四.作用域
    按照语法树，就近原则
    我们只能确定变量是哪个变量，但是不能确定变量的值

五.闭包
    闭包就是能够读取其他函数内部变量的函数。
    例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。
    在本质上，闭包是将函数内部和函数外部连接起来的桥梁。